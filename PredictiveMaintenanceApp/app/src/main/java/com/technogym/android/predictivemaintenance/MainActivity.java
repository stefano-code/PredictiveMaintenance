package com.technogym.android.predictivemaintenance;

import androidx.appcompat.app.AppCompatActivity;

import android.graphics.Bitmap;
import android.graphics.drawable.BitmapDrawable;
import android.os.Bundle;
import android.util.Log;
import android.view.View;
import android.widget.Button;

import com.technogym.android.predictivemaintenance.ml.AnomalyClassifier;
import com.technogym.android.predictivemaintenance.ml.AnomalyClassifierRecognition;
import com.technogym.android.predictivemaintenance.ml.PCA;
import com.technogym.android.predictivemaintenance.ml.PCA_Scores;

import java.nio.ByteBuffer;
import java.nio.ByteOrder;
import java.util.List;

public class MainActivity extends AppCompatActivity
{
    private static final String TAG = "PredictMaintenance";
    private PCA pca = new PCA();

    private AnomalyClassifier classifier;
    @Override
    protected void onCreate(Bundle savedInstanceState)
    {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_main);
        pca.init();
        classifier = new AnomalyClassifier(this);

        Button btnPCA = findViewById(R.id.btnPCA);
        btnPCA.setOnClickListener((View v) -> pcaExecute());

        Button btnClassifier = findViewById(R.id.btnClassifier);
        btnClassifier.setOnClickListener((View v) -> classifierExecute());
    }
    /*
    Samples[] samples = new Samples[](1024)
    Float[] std_samples = pca.preprocessing(samples);

    float[] samples = new float[1024];

     */

    private void pcaExecute()
    {
        Log.e(TAG, "pcaExecute");
        new Thread(new Runnable(){
            @Override
            public void run()
            {
                Log.e(TAG, "pcaExecute in worker thread");
                float[] samples = new float[1024];
                for(int i=0; i < samples.length; i++)
                    samples[i] = i*0.1f;

                int res = pca.checkTemperature(samples);
                Log.e(TAG, "checkTemperature " + res);

                res = pca.checkOrientation(samples);
                Log.e(TAG, "checkOrientation " + res);

                PCA_Scores scores = pca.execute(samples);
                Log.e(TAG, "result scores: " + scores.toString());
            }
        }).start();
    }

    private void classifierExecute()
    {
        Log.e(TAG, "classifierExecute");
        new Thread(new Runnable(){
            @Override
            public void run()
            {
                Log.e(TAG, "classifierExecute in worker thread");
                List<AnomalyClassifierRecognition> res = classifier.classify(dataForsimulation());
                for(AnomalyClassifierRecognition anomaly : res)
                    Log.e(TAG, "AnomalyClassifierRecognition " + anomaly.toString());
            }

            private int INPUT_SIZE = 224;
            private int PIXEL_SIZE = 3;
            private int IMAGE_MEAN = 0;
            private float IMAGE_STD = 255.0f;

            private ByteBuffer dataForsimulation()
            {
                Bitmap scaledBitmap = Bitmap.createScaledBitmap(((BitmapDrawable) getResources().getDrawable(R.drawable.img1)).getBitmap(), INPUT_SIZE, INPUT_SIZE, false);
                ByteBuffer byteBuffer;

                //SS byteBuffer = ByteBuffer.allocateDirect(4/* dimensione float*/* INPUT_SIZE * INPUT_SIZE * PIXEL_SIZE);
                byteBuffer = ByteBuffer.allocateDirect(512*4);
                byteBuffer.order(ByteOrder.nativeOrder());
/*
                int[] intValues = new int[INPUT_SIZE * INPUT_SIZE];
                scaledBitmap.getPixels(intValues, 0, scaledBitmap.getWidth(), 0, 0, scaledBitmap.getWidth(), scaledBitmap.getHeight());
                int pixel = 0;
                for (int i = 0; i < INPUT_SIZE; ++i) {
                    for (int j = 0; j < INPUT_SIZE; ++j) {
                        final int val = intValues[pixel++];
                        byteBuffer.putFloat((((val >> 16) & 0xFF)-IMAGE_MEAN)/IMAGE_STD);
                        byteBuffer.putFloat((((val >> 8) & 0xFF)-IMAGE_MEAN)/IMAGE_STD);
                        byteBuffer.putFloat((((val) & 0xFF)-IMAGE_MEAN)/IMAGE_STD);
                    }
                }
                */


                float[] samples = {-0.014594405925756828f,0.010497086708596181f,0.04719440282207217f,-0.029541619091110114f,0.02459481900233527f,-0.07112085245751887f,0.011835762485516781f,-0.007143633574408455f,0.011884283144655339f,0.055178017790487185f,0.0007608912815156161f,-0.01985071928996284f,-0.007123205681513582f,-0.03738390409670448f,0.060861894113496136f,-0.03214168531406346f,0.09545591958676636f,-0.08556673221207828f,0.033515008826575335f,-0.0676364127626014f,-0.08142890243364746f,0.07011482261836553f,-0.0019801106890053382f,0.031475242137160776f,0.03482613006749353f,-0.0030095135420514325f,-0.021074769458164354f,-0.012797787529250019f,-0.007838173328479957f,-0.027470027469148603f,0.021153771509460132f,-0.016155017856206568f,-0.021692616505388902f,0.06662197672408826f,-0.10055674458048364f,0.07144036888857919f,-0.03644967702723543f,-0.004164972986032141f,0.059668131436217374f,-0.021007582672183635f,0.028213139036164854f,0.03210029710509542f,-0.07678358564039164f,0.03466540703983792f,-0.10706879198084415f,0.02802556024734105f,-0.018086216026302625f,0.08588297994497944f,-0.06113302846520287f,0.052464436177491885f,-0.05299197987396746f,-0.0035086146600889676f,0.06916559186864833f,-0.043926030698081486f,0.10542837117232107f,-0.06140575912138574f,0.012048410893712476f,-0.058073687269208626f,-0.0635434675657027f,0.02571040409975588f,0.027364903320802596f,0.0770698258197266f,-0.04330202139107272f,0.03500419021004169f,-0.05064382987607594f,-0.013091903737648224f,0.03613293475819456f,-0.033706718267541375f,0.051163304808645574f,-0.011515263446540247f,0.0019882687870411545f,-0.029418595305606286f,-0.0007427753579071852f,0.03744098160128818f,-0.02769946968688777f,0.0319244177340634f,-0.010942056035934095f,-0.05155532264657142f,0.03367114071799409f,-0.029687844963123988f,-0.0008311439980480672f,0.03401812631142117f,-0.027790017685725095f,0.022653477780253103f,0.0255404395388257f,0.029951939621194204f,-0.02614109520024769f,-0.019177400722534467f,-0.015495081183316177f,-0.04505948378093921f,0.016151152334365f,0.01609020314163637f,0.006246537434241914f,0.02223416911016392f,0.012355820439258685f,0.004239256592436746f,-0.022323893722425395f,-0.008129543726822647f,0.01362487248507299f,0.031080580527387394f,-0.022754722142234316f,0.0006236952704414796f,-0.05192000291152275f,0.004139110212942633f,-0.0631397116460026f,0.024063834000942714f,0.051929342779530985f,0.001367044833815751f,0.04433942982468032f,0.013081509567442763f,-0.10310619931255219f,0.0942219095315445f,-0.05495742809891563f,-0.00716630177614925f,0.06795748010966025f,-0.07338929559673552f,0.01474849853562723f,0.03522669041084012f,-0.04002273502734254f,-0.0008419093915639104f,0.07348969601759293f,-0.037332008306734964f,0.01552367009018107f,0.04438977174110835f,-0.0877409393639588f,0.07247847276364586f,-0.04584686031298078f,-0.05126489808693683f,0.059222485303647404f,-0.043054584510385005f,0.05214475820916125f,0.02670266111613595f,-0.013295110146095863f,-0.03750336154653687f,-0.02123779114354251f,-0.006905115127140791f,-0.011105326048690535f,0.03830005474562336f,-0.012466826893037597f,0.02665414320197876f,0.0649718509708156f,-0.12305875770376885f,0.053908343863998544f,-0.04677097119012353f,0.0533515468672816f,0.052881966772806585f,-0.07422345276223409f,0.06753201135730852f,-0.10604651904512569f,0.0019865023410927645f,0.009701399356071734f,0.00831195740286783f,0.030701565788967024f,0.04990387534333378f,-0.035727593095458816f,-0.03815388861740428f,0.023735339981165303f,-0.05906960632027279f,0.10036902791310622f,-0.0038900295851552655f,0.001317167460063115f,0.012350154155123385f,-0.04528309530914236f,-0.004588995350941092f,-0.027459182886709576f,0.06493912046772497f,0.006175224087735922f,0.01791626589764877f,0.03634662940072322f,-0.05785113847921526f,-0.031175686593729737f,0.004146289174206171f,-0.03621954169376648f,-0.014553363052328698f,0.07410100993469378f,-0.04292681570926611f,0.061571668620475646f,0.022261900699708962f,-0.01144978559122819f,-0.04395357990967109f,0.0020933038706487084f,-0.04158223705021301f,0.018386571783335297f,0.042452875808679055f,-0.02320240151626127f,0.01979531933317686f,-0.04092631856148182f,0.02314287349810305f,-0.01855150615620259f,0.06104298690354727f,0.004834620826986151f,0.022772194833557267f,0.016918865224203525f,-0.09048883669228387f,0.003089624717486495f,-0.030635223179695095f,0.01498034286886525f,0.04273337271055569f,0.009112408024925694f,0.026426249128040372f,-0.06236111273429367f,-0.029411942477937957f,-0.04328529090116455f,0.023840731158212485f,0.12496131327135172f,-0.04259426683824438f,0.028955256655683916f,-0.022258588418735088f,-0.03789646599258141f,-0.014771249405320184f,0.03450670012609625f,-0.06298078519106641f,0.05125465214068456f,-0.006016570399355014f,-0.010375445564431807f,0.01995753270548416f,0.034558665668352875f,-0.06311946951531722f,0.0480087712428692f,-0.05030953576013893f,0.0016773449120973552f,0.022114388171359304f,-0.043938895104621026f,0.059609760204201084f,-0.03358618098958721f,0.00104073138317648f,0.0009546954824908169f,-0.007898115796775296f,0.05152054940607554f,-0.04745032431645121f,0.006801802752507134f,-0.04724919553799095f,0.02322487260215501f,-0.037985191301874256f,0.021710984316152766f,0.04796452916216327f,-0.027394868344815474f,0.10630305893293926f,-0.11676009056809028f,0.021682898333457688f,-0.041896482936332365f,-0.023975486075739055f,0.08746363215434332f,-0.016273517187289695f,0.05881495149341688f,-0.04148358922160128f,0.0019863749171289283f,-0.05812004895929075f,-0.011220560776292566f,0.060295093653546745f,0.0014505179939299049f,0.06994448584719916f,-0.06761672781453423f,-0.03794366344114267f,0.02803569275000212f,-0.03197889394834685f,0.019779780826112068f,0.026305404248324307f,0.011981239928044176f,-0.01656736331592096f,0.0358577103660256f,-0.028957303483982032f,-0.013994454191442898f,0.0013253270355694144f,0.022399462734230966f,-0.036841836177424134f,0.007651186058341651f,0.001862587242214901f,-0.06807909562495379f,0.021297862084129787f,0.011905220096116392f,-0.007793496967175722f,0.018102274381179468f,0.041893673448119326f,0.01538768082563581f,0.004514927047677249f,-0.015122587825534071f,-0.0465594417896983f,-0.04373737275407438f,0.008411658314170926f,0.006916119706881364f,0.037548486820406714f,0.03221080190210192f,-0.01973451285755183f,0.00979828769758271f,0.0017304414446000936f,-0.01870026995288769f,0.03260723420051718f,0.014691146026189534f,0.01775415399304418f,-0.03425653569492868f,-0.012482678801719112f,-0.0400727204021354f,-0.04083564536170339f,0.08992004192167616f,-0.10339300132782028f,0.12463904655600652f,-0.0027678502313845488f,-0.06346112336641807f,0.08440394705319788f,-0.09419463689888374f,0.05295476878614474f,0.033212299755377296f,-0.012770214416601477f,-0.013545105121335322f,-0.03307711788208196f,-0.023265543094549847f,-0.026282458809020106f,0.06470067334283133f,0.0010074944672339562f,0.0007967795092369692f,0.032287836659840176f,-0.04237849621842295f,-0.00022794441409243504f,0.008732234687302845f,-0.028593337672450772f,0.024860180569402177f,-0.014109803392807721f,0.022835755337878447f,0.022738991180780616f,0.011831734298344351f,-0.011750391035273835f,-0.026871915543075747f,-0.018322784843145198f,-0.043417799494521944f,0.11189950646626882f,-0.05570010443662829f,0.10089857637913742f,-0.07203606609032734f,0.014384789744375256f,0.03857274536917386f,-0.10486733375998936f,0.09005147391220568f,-0.057304736460110466f,0.015039454232052437f,0.021209539868947372f,-0.03581349047875954f,-0.004970454758311114f,-0.019471554705039803f,0.022302594405881268f,-0.03100813660147952f,0.09409645138662949f,-0.07792111578385155f,0.06926514178497442f,-0.06423993104400381f,-0.04654928846724048f,0.03876815318365805f,0.005800837236846644f,0.03867500536865104f,-0.016863420348357933f,-0.02091829011293423f,-0.004110926370384856f,-0.04492255937135921f,0.04913515865275708f,0.008952069798657472f,-0.0458936001497625f,0.08067956989394214f,-0.06493056198283989f,0.033073087462617584f,0.01739210138698995f,-0.04133336873042272f,-0.0023971033757450326f,-0.03487319182766937f,0.021122873403268086f,0.0020260302818144982f,-0.011923233206534434f,0.043404928322768585f,-0.03871553186759875f,0.045117646248160476f,-0.017259456918430574f,-0.0072210180932751845f,0.034946449247510905f,0.013182999178298072f,-0.008836717644680844f,-0.013630168751268169f,-0.02867551408164955f,-0.020718017635075966f,0.039061502926813776f,-0.013610918571489992f,0.056235940614352886f,-0.008375180379860543f,0.03427684964894904f,-0.0666173592921921f,-0.015421678099204906f,0.04538574471545208f,-0.021769881629316905f,0.044203662114102954f,0.03539106816529847f,-0.12208431068674373f,0.12251255961961886f,-0.13555635508007485f,-0.0033187694074207886f,0.06983123459851183f,-0.0267646572608853f,0.03191452425759419f,0.03515532171867237f,-0.07796222953988466f,-0.0006766488239650347f,0.012399287681635323f,-0.038358291350137956f,0.022815324465972536f,0.048861062083218755f,-0.07322842068497232f,0.07637217356916022f,-0.03856690225886902f,-0.044272262998177235f,0.043966767354249515f,-0.05310438607182809f,0.050088334546368934f,-0.004054852237855628f,0.007212334315794503f,-0.014496191378575166f,0.011169705537787719f,-0.002207709570644589f,-0.030413455734731955f,0.02299860757036751f,0.012838220707610816f,0.04075109400125232f,0.03847263021146214f,-0.11935824885371689f,0.027950785014610867f,-0.10137945429537279f,0.03610622484560582f,0.027596165654075036f,-0.009727943988891164f,0.065613747898858f,-0.02099282135839084f,0.03826028482995894f,-0.041658432662903325f,-0.01400500445833157f,-0.02323380222135803f,0.033137026972248906f,-0.012202477667706718f,-0.02167721991410601f,0.025491603465155704f,-0.09280642290764174f,0.09304066381151918f,-0.021145279286298568f,0.010595151539184286f,0.060141446975645683f,-0.008646959451530873f,-0.012371295271234881f,-0.021324612191729892f,0.005284552530450984f,-0.03169650492448634f,0.02420896107555581f,0.019406523966453225f,-0.014231362532393725f,0.002334409813381816f,-0.0044753460843611845f,-0.01867957682082681f,0.010952552419786338f,0.055561112028143025f,-0.03149635853140335f,0.03704598959713502f,0.03056545037451596f,-0.040741842908171774f,-0.013239287528637837f,-0.017952054739078873f,-0.0632123829797175f,0.032855139312654345f,0.027665417783555718f,0.014425828471226526f,0.03549738510263859f,-0.02684107747282153f,0.015714134818827375f,-0.02694361349973644f,-0.015974969329516895f,-0.005443404098430982f,0.005592353444346411f,0.05093367233026059f,-0.019609013232903913f,0.017602265614916443f,-0.022138995489691494f,-0.01687988898201752f,0.00833362185790497f,-0.007973223519172668f,0.05605464472157602f,-0.034572782366363665f,0.04264228288159557f,-0.06541255213487683f,-0.02333667448094851f,0.06016048250420589f,-0.026414529385501578f,0.06159076722688203f,0.027547903336287705f,-0.027928885864122288f,-0.040930005892381924f,-0.00969120873037504f,-0.05364374394336816f,0.04151260798070752f,0.0038446746146076935f,0.0178270901123368f,0.0005454992451253732f,0.029666081003180696f,-0.039016475190699486f,0.022866072740933687f,-0.032964618054655836f,-0.02209421895141353f,0.019580175655969666f,-0.0302741054487279f,0.05703768981091331f,-0.02709891134766261f,0.011873883761537021f,-0.046796475036552605f,-0.0049663157481565495f,0.01237499618718054f,0.0028118584108923423f,0.07446881904482328f,-0.0355653886022034f,0.07385308784331016f,-0.07178115678503266f};
                Log.e(TAG, "SIZE " + samples.length);
                for (int i = 0; i < 512; i++)
                    byteBuffer.putFloat(samples[i]);

//                Log.e("TEST**","Record Value Capacity: " + byteBuffer.capacity());
//                Log.e("TEST**","Record Value Position: " + byteBuffer.position());
//                Log.e("TEST**","Record Value Limit: " + byteBuffer.limit());
//                Log.e("TEST**","Record Value Remaining: " + byteBuffer.remaining());
//                Log.e("TEST**","Record Value: " + byteBuffer);
                Log.e(TAG, "END");
                return byteBuffer;
            }
        }).start();
    }
}